(in-package #:cl-data-structures.documentation)
(cl-lore.api.syntax:syntax
 cl-lore.extensions.documentation.api
 cl-lore.extensions.sequence-graphs.api)


@begin{section}
@title{Generic Functions}
@label{API Generic Functions}
@text{The following set contains generic functions that can be used to query or manipulate containers. Not all containers can be manipulated with entieriety of those functions. However, applicable functions are defined in the category of container, and thus, this manual lists functions applicable for instances of containers in each category.}
(level [section]
  @title{Query Functions}
  @text{Following generic functions check state of the container and are not allowed to change it.}
  @begin{documentation}
  @pack{CL-DATA-STRUCTURES}
  @docgeneric['cl-ds:at]
  @docgeneric['cl-ds:near]
  @docgeneric['cl-ds:size]
  @docgeneric['cl-ds:mutablep]
  @docgeneric['cl-ds:transactionalp]
  @docgeneric['cl-ds:functionalp]
  @end{documentation})
@text{Immutable and mutable containers are modified by separate sets of functions.}
 @begin{table}
 @row{@emph{Immutable} @emph{Mutable}}
 @row{@'cl-ds:insert @'(setf cl-ds:at)}
 @row{@'cl-ds:add @'cl-ds:add!}
 @row{@'cl-ds:update @'cl-ds:update!}
 @row{@'cl-ds:update-if @'cl-ds:update-if!}
 @row{@'cl-ds:erase @'cl-ds:erase!}
 @row{@'cl-ds:erase-if @'cl-ds:erase-if!}
 @row{@'cl-ds:put @'cl-ds:put!}
 @row{@'cl-ds:take-out @'cl-ds:take-out!}
 @end{table}
(level [section]
  @title{Functional modification API}
  @begin{documentation}
  @pack{CL-DATA-STRUCTURES}
  @docgeneric['cl-ds:insert]
  @docgeneric['cl-ds:add]
  @docgeneric['cl-ds:update]
  @docgeneric['cl-ds:update-if]
  @docgeneric['cl-ds:erase]
  @docgeneric['cl-ds:erase-if]
  @docgeneric['cl-ds:put]
  @docgeneric['cl-ds:take-out]
  @end{documentation})
(level [section]
  @title{Mutable modification API}
  @begin{documentation}
  @pack{CL-DATA-STRUCTURES}
  @docgeneric['(setf cl-ds:at)]
  @docgeneric['cl-ds:add!]
  @docgeneric['cl-ds:update!]
  @docgeneric['cl-ds:update-if!]
  @docgeneric['cl-ds:erase!]
  @docgeneric['cl-ds:erase-if!]
  @docgeneric['cl-ds:put!]
  @docgeneric['cl-ds:take-out!]
  @end{documentation})
(level [section]
  @title{Variants API}
  @begin{documentation}
  @pack{CL-DATA-STRUCTURES}
  @docgeneric['cl-ds:become-functional]
  @docgeneric['cl-ds:become-mutable]
  @docgeneric['cl-ds:become-transactional]
  @docgeneric['cl-ds:replica]
  @docgeneric['cl-ds:become-lazy]
  @end{documentation})
@end{section}


@begin{section}
@title{Macros}
@label{API Macros}
 @begin{documentation}
 @pack{CL-DATA-STRUCTURES}
 @docmacro['cl-ds:mod-bind]
 @end{documentation}
@end{section}


@begin{section}
@title{Classes}
@label{API Classes}
 @begin{documentation}
 @pack{CL-DATA-STRUCTURES}
 @docclass['cl-ds:fundamental-container]
 @docclass['cl-ds:fundamental-modification-operation-status]
 @docclass['cl-ds:functional]
 @docclass['cl-ds:mutable]
 @docclass['cl-ds:transactional]
 @docclass['cl-ds:lazy]
 @end{documentation}
@end{section}


@begin{section}
@label{API Conditions}
@title{Conditions}
@text{Cl-data-structures tries to signal only the well structured errors that are possible to interpret. In order to achieve this, the hierarchy of condition classes is introduced. Below there is documentation explaining it.}
 @begin{documentation}
 @pack{CL-DATA-STRUCTURES}
 @docerror['cl-ds:textual-error]
 @docerror['cl-ds:invalid-argument]
 @docerror['cl-ds:initialization-error]
 @docerror['cl-ds:unexpected-argument]
 @docerror['cl-ds:out-of-bounds]
 @docerror['cl-ds:argument-value-out-of-bounds]
 @docerror['cl-ds:initialization-out-of-bounds]
 @docerror['cl-ds:not-implemented]
 @end{documentation}
@end{section}


@begin{section} @label{cl-ds API}
@title{API Reference}
@text{This section contains reference of all the basic functions, classes and macros provided by this library to the user.}
 @begin{section}
 @title{Common API}
 @include{API Generic Functions}
 @include{API Macros}
 @include{API Classes}
 @include{API Conditions}
 @end{section}
@end{section}


@begin{section} @label{cl-ds algorithms}
 @title{Algorithms Reference}
 @text{This section contains reference of all the functions in the CL-DS.ALG package.}

 @begin{section} @title{Aggregation Functions}
  @text{Aggregation functions transform range into a singular value, akin to the SQL aggergation functions.}
  @begin{documentation}
   @pack{CL-DATA-STRUCTURES.ALGORITHMS}
   @docfun['cl-ds.alg:accumulate]
   @docfun['cl-ds.alg:cumulative-accumulate]
   @docfun['cl-ds.alg:count-elements]
   @docfun['cl-ds.alg:extrema]
   @docfun['cl-ds.alg:extremum]
   @docfun['cl-ds.alg:to-vector]
   @docfun['cl-ds.alg:to-hash-table]
  @end{documentation}
 @end{section}

 @begin{section} @title{Layer Functions}
  @text{Layer functions decorate the input range to add a new behavior to it.}
  @begin{documentation}
   @pack{CL-DATA-STRUCTURES.ALGORITHMS}
   @docfun['cl-ds.alg:distinct]
   @docfun['cl-ds.alg:cumulative-accumulate]
   @docfun['cl-ds.alg:flatten-lists]
   @docfun['cl-ds.alg:group-by]
   @docfun['cl-ds.alg:on-each]
   @docfun['cl-ds.alg:only]
   @docfun['cl-ds.alg:without]
   @docfun['cl-ds.alg:partition-if]
   @docfun['cl-ds.alg:repeat]
   @docfun['cl-ds.alg:latch]
   @docfun['cl-ds.alg:restrain-size]
   @docfun['cl-ds.alg:split-into-chunks]
  @end{documentation}
 @end{section}

 @begin{section} @title{Other Functions}
  @begin{documentation}
   @pack{CL-DATA-STRUCTURES.ALGORITHMS}
   @docfun['cl-ds.alg:cartesian]
   @docfun['cl-ds.alg:chain]
   @docfun['cl-ds.alg:shuffled-range]
   @docfun['cl-ds.alg:zip]
   @docmacro['cl-ds.alg:summary]
   @docfun['cl-ds.alg:shuffled-range]
  @end{documentation}
 @end{section}

@end{section}

@begin{section} @label{cl-ds file system}
@title{File System Reference}
@text{This section contains reference of all the functions, classes and macros in the CL-DS.FS package. Those functions act primarly as a simple bridge between files in the operating system and the algorithms package and therefore usually return ranges.}
 @begin{documentation}
  @pack{CL-DATA-STRUCTURES.FILE-SYSTEM}
  @docfun['cl-ds.fs:line-by-line]
  @docfun['cl-ds.fs:find]
 @end{documentation}
@end{section}

@begin{section} @label{cl-ds math}
@title{Math Reference}
@text{This section contains reference of all the functions in the CL-DS.MATH package.}
@begin{documentation}
@pack{CL-DATA-STRUCTURES.MATH}
@docgeneric['cl-ds.math:average]
@docgeneric['cl-ds.math:bootstrap]
@docgeneric['cl-ds.math:hodges-lehmann-estimator]
@docgeneric['cl-ds.math:moments]
@docgeneric['cl-ds.math:moving-average]
@docgeneric['cl-ds.math:mutual-information]
@docgeneric['cl-ds.math:simple-linear-regression]
@docgeneric['cl-ds.math:variance]
@end{documentation}
@end{section}

@begin{section} @label{cl-ds clustering}
@title{Clustering Reference}
@text{This section contains reference of all functions and classes in the CL-DS.CLUSTER package.}
@begin{documentation}
@pack{CL-DATA-STRUCTURES.CLUSTERING}
@docgeneric['cl-ds.cluster:clara]
@docgeneric['cl-ds.cluster:k-means]
@end{documentation}
@end{section}

@begin{section} @label{cl-ds threads}
@title{Threads Reference}
@text{This section contains reference of the multithreading utilities.}
@begin{documentation}
@pack{CL-DATA-STRUCTURES.THREADS}
@docgeneric['cl-ds.threads:thread-buffer]
@docgeneric['cl-ds.threads:parallel-multiplex]
@end{documentation}
@end{section}

@begin{section} @label{cl-ds streaming}
@title{Streaming Algorithms Reference}
@text{This section contains reference of the data sketches.}
@begin{documentation}
@pack{CL-DATA-STRUCTURES.STREAMING-ALGORITHMS}
@docgeneric['cl-ds.sa:bloom-filter]
@docgeneric['cl-ds.sa:approximated-counts]
@docgeneric['cl-ds.sa:approximated-set-cardinality]
@docgeneric['cl-ds.sa:union]
@docgeneric['cl-ds.sa:clean-sketch]
@docclass['cl-ds.sa:fundamental-data-sketch]
@end{documentation}
@end{section}