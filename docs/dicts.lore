(in-package #:cl-data-structures.documentation)
(cl-lore.api.syntax:syntax
 cl-lore.extensions.documentation.api
 cl-lore.extensions.sequence-graphs.api)


@begin{section}
@label{Dicts API}
@title{API}
@text{To obtain value under key use following functions:}
 @begin{list}
 @item{AT}
 @end{list}
@text{To change mapping use following purely functional functions:}
 @begin{list}
 @item{INSERT}
 @item{ADD}
 @item{UPDATE}
 @item{UPDATE-IF}
 @item{ERASE}
 @item{ERASE-IF}
 @end{list}
@text{To change mapping in destructive way, use following functions:}
 @begin{list}
 @item{(SETF AT)}
 @item{ADD!}
 @item{UPDATE!}
 @item{UPDATE-IF!}
 @item{ERASE!}
 @item{ERASE-IF!}
 @end{list}
@text{This package adds another set of trait classes, specific to dictionaries.}
@docclass['cl-ds.dicts:fundamental-dictionary]
@docclass['cl-ds.dicts:fundamental-hashing-dictionary]
@docclass['cl-ds.dicts:functional-dictionary]
@docclass['cl-ds.dicts:mutable-dictionary]
@docclass['cl-ds.dicts:transactional-dictionary]
@docclass['cl-ds.dicts:lazy-dictionary]
@docclass['cl-ds.dicts:functional-hashing-dictionary]
@docclass['cl-ds.dicts:mutable-hashing-dictionary]
@docclass['cl-ds.dicts:transactional-hashing-dictionary]
@docclass['cl-ds.dicts:lazy-hashing-dictionary]
@text{In addition to this, on this level, few additional functions are defined.}
@docgeneric['cl-ds.dicts:find-content]
@end{section}


@begin{section} @title{Sparse RRB Vector} @label{SRRB}
@text{Sparse variant of the RRB vector. Unlike the CL:HASH-TABLE, this container will guarantee that the content is stored in the ascending order. Just like in the case of the RRB vectors, modification of the tail (which includes pushing new elements to the end) is optimized but put functions are not supported.} 
@docclass['cl-ds.dicts.srrb:mutable-sparse-rrb-vector]
@docclass['cl-ds.dicts.srrb:functional-sparse-rrb-vector]
@docclass['cl-ds.dicts.srrb:transactional-sparse-rrb-vector]

@begin{section}
@title{Constructing}
@text{To construct SRRB vector, use following functions.}
@begin{documentation} @pack{CL-DATA-STRUCTURES.DICTS.HAMT}
@docfun['cl-ds.dicts.srrb:make-functional-sparse-rrb-vector]
@docfun['cl-ds.dicts.srrb:make-mutable-sparse-rrb-vector]
@docfun['cl-ds.dicts.srrb:make-transactional-sparse-rrb-vector]
@end{documentation}
@end{section}

@end{section}


@begin{section}
@title{HAMT}
@label{HAMT}
@text{HAMT stands from hash array mapped trie. This data structure is used the most commonly as functional dictionary in standard libraries of few recent languages (including Clojure and Scala). Cl-data-structures implementation offers also mutable and transactional variant of this structure. Although this container is not optimized for destructive modification, it is still faster then copy-on-write whole path from root to the bottom (conflict) node.}
@text{Dictionary implementation of HAMT is present in the system as a class.}
@docclass['cl-ds.dicts.hamt:hamt-dictionary]
@docclass['cl-ds.dicts.hamt:functional-hamt-dictionary]
@docclass['cl-ds.dicts.hamt:mutable-hamt-dictionary]
@text{As you can see, it inherits DICTIONARY trait class as well as lower level FUNDAMENTAL-HAMT-CONTAINER class. All instances of this class can be used with following functions:}
@docfun['cl-ds.dicts.hamt:hamt-dictionary-at]
@docfun['cl-ds.dicts.hamt:hamt-dictionary-size]
@text{Functional dictionary is represented by the following class:}
@text{There is no lazy-hamt-dictionary class, because lazy hamt dictionary is nothing more then a TRANSACTIONAL-HAMT-DICTIONARY inside LAZY-BOX.}
(level [section]
  @title{Constructing}
  @text{To construct HAMT dictionary, use following functions.}
  @begin{documentation} @pack{CL-DATA-STRUCTURES.DICTS.HAMT}
  @docfun['cl-ds.dicts.hamt:make-functional-hamt-dictionary]
  @docfun['cl-ds.dicts.hamt:make-mutable-hamt-dictionary]
  @docfun['cl-ds.dicts.hamt:make-transactional-hamt-dictionary]
  @end{documentation})
(level [section]
  @title{POSITION-MODIFICATION contracts}
  @text{Since HAMT is hashing container, many of the functions accept additional hash key argument with fixnum produced by the hashing function.}
  @text{SHRINK-BUCKET function must be defined in terms all functional shrink-functions and buckets. Will accept :hash.}
  @text{GROW-BUCKET function must be defined in terms all functional grow-functions and buckets. Will accept :hash.}
  @text{SHRINK-BUCKET! function must be defined in terms all mutable shrink-functions and buckets. Will accept :hash.}
  @text{GROW-BUCKET! function must be defined in terms all mutable grow-functions and buckets. Will accept :hash.}
  @text{MAKE-BUCKET function must be defined in terms of all grow-functions and will return list of hash-content-tuple as bucket. Will accept :hash}
  @text{Bucket must be usable with cl-ds.dicts:find-content. FIND-CONTENT function will accept hash as key argument.})
@end{section}


@begin{section}
@title{Dictionary structures}
@label{dicts}
@text{Dictionaries map values to unique keys. @lisp standard already contains such structures (hash tables, alists, plists) and therefore idea should not be alien to a Lisp programmer. CL-DATA-STRUCTURES offers both functional and mutable dictionaries, with HAMT being the prime example of complete, feature rich implementation of the protocol. In practice, containers present in this module are either ordered containers (for instance binary search trees) or some sort of unordered hash table (either classiscal hashtable or some sort of hashing tree). In each case, overview of data structure is present in this document.}
@include{Dicts API}
@include{HAMT}
@include{SRRB}

@end{section}
